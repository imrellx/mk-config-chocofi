/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

/* TODO: */
/* 1. Homerow mods */
/* 2. Tapdance numbers */
/* 3. cut/copy/paste (really just copy paste) */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&mt {
    tapping-term-ms = <201>;
    flavor = "tap-preferred";
};

#define AL 0
#define SYM 1
#define NUM 2

/ {
        behaviors {
            sr: select_layer {
                compatible = "zmk,behavior-hold-tap";
                label = "SELECT_LAYER";
                #binding-cells = <2>;
                tapping-term-ms = <220>;
                quick_tap_ms = <0>;
                flavor = "hold-preferred";
                bindings = <&to>, <&sl>;
            };
            lk: layer_key {
                compatible = "zmk,behavior-hold-tap";
                label = "LAYER_KEY";
                #binding-cells = <2>;
                tapping-term-ms = <220>;
                quick_tap_ms = <0>;
                flavor = "tap-preferred";
                bindings = <&to>, <&kp>;
            };
            tdl: tap_dance_layers {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_LAYERS";
                #binding-cells = <0>;
                tapping-term-ms = <200>;
                bindings = <&sl>, <&sr>;
            };
        };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// ------------------------------------------------------------------
// |  Q  |  W  |  F  |  P  |  B  |   |  J  |  L   |  U  |  Y  |  ;  |
// |  A  |  R  |  S  |  T  |  G  |   |  M  |  N   |  E  |  I  |  O  |
// |  Z  |  X  |  C  |  D  |  V  |   |  K  |  H   |  ,  |  .  |  /  |
//             | ESC | RSE |BSPC |   | SPC | ENT  |  '  |
                        bindings = <
   &none &kp      Q &kp W &kp F &kp P &kp B   &kp J &kp L  &kp U     &kp Y   &kp SEMI      &none
   &none &kp      A &kp R &kp S &kp T &kp G   &kp M &kp N  &kp E     &kp I   &kp O         &none
   &none &mt LSFT Z &kp X &kp C &kp D &kp V   &kp K &kp H  &kp COMMA &kp DOT &mt RSFT FSLH &none
                   &kp ESC &tdl SYM SYM NUM &kp BSPC   &mt LC(LS(LALT)) SPACE &kp RET &kp SQT
                        >;
                };
                sym_layer {
// -----------------------------------------------------------------
// |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  -  |  \  |
// | TAB |     |  {  |  (  |  [  |   |  ]  |  )  |  }  |     |  '  |
// |     |     |     |     |     |   |     |     |     |  -  |  =  |
//             |     | RSE |     |   | ALP |     |     |
                        bindings = <
   &none &kp EXCL   &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp MINUS &kp BSLH  &none
   &none &kp TAB    &trans &kp LBRC &kp LPRN &kp LBKT    &kp RBKT  &kp RPRN  &kp RBRC        &trans    &kp SQT   &none
   &none &kp GRAVE  &trans &kp LCTL &kp LALT &kp DEL     &trans    &trans    &trans          &kp MINUS &kp EQUAL &none
                      &trans   &trans   &trans      &lk AL SPACE &trans &trans
                        >;
                };

                num_layer {
// -----------------------------------------------------------------
// |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |
// |     | LFT | DWN |  UP | RGT |   |  H  |  J  |  K  |  L  |     |
// |     |     |     |     |     |   |     |     |     |     |     |
//             |     | RSE |     |   | ALP |     |     |
                        bindings = <
   &none &kp N1 &kp N2   &kp N3   &kp N4 &kp N5       &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 &none
   &none &trans &kp LEFT &kp DOWN &kp UP &kp RIGHT    &kp H  &kp J  &kp K  &kp L  &trans &none
   &none &trans &trans   &trans   &trans &trans       &trans &trans &trans &trans &trans &none
                         &trans &sr NUM SYM &trans    &lk AL SPACE  &trans &trans
                        >;
                };
        };
};
